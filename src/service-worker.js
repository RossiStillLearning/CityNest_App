/* eslint-disable no-restricted-globals */
// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all assets generated by the build process.
// URLs are injected into the `__WB_MANIFEST` variable.
precacheAndRoute(self.__WB_MANIFEST);

// App Shell-style routing: Serve the `index.html` shell for all navigation requests.
// Learn more at https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');

registerRoute(
  // Handle navigation requests
  ({ request, url }) => {
    // Skip non-navigation requests
    if (request.mode !== 'navigate') {
      return false;
    }

    // Skip URLs that start with /_
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // Skip URLs that look like resources with file extensions
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Use handler for all other navigation requests
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Runtime caching for same-origin .png requests
registerRoute(
  // Match .png files from the same origin
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),

  // Use StaleWhileRevalidate strategy for caching
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Automatically expire cached images once the limit is reached
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// Allow the web app to trigger `skipWaiting`
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
